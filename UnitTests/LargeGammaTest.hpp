#ifndef LARGEGAMMATEST_HPP
#define	LARGEGAMMATEST_HPP

#include "Test.hpp"
#include "../LargeGammaCalculator.hpp"

namespace UnitTests
{
    class LargeGammaTest : public Test
    {
    protected:
        LargeGammaCalculator *gamma_list_base_10;
        
        void setUp() override
        {
            gamma_list_base_10 = new LargeGammaCalculator(10);
        }

        void tearDown() override
        {
            delete gamma_list_base_10;
        }
    };
    
    TEST(Large_Gamma_Base_10_Test, LargeGammaTest)
    {
        const GammaValuesVector expected_value = {
            {0, 0, 0,     0}, 
            {1, 1, 0,     1},
            {2, 164, 2,   6, 8, 8},
            {3, 165, 2,   1, 6, 8, 8},
            {4, 4, 0,     2},
            {5, 5, 0,     1, 2},
            {6, 168, 2,   2, 6, 8, 8},
            {7, 250, 3,   3, 7, 8, 8, 8},
            {8, 89, 1,    5, 8},
            {9, 9, 0,     3},
            {10, 10, 0,   1, 3},
            {11, 173, 2,  3, 6, 8, 8},
            {12, 93, 1,   2, 5, 8},
            {13, 256, 3,  8, 8, 8, 8},
            {14, 257, 3,  1, 8, 8, 8, 8},
            {15, 177, 2,  7, 8, 8},
            {16, 16, 0,   4},
            {17, 98, 1,   7, 7},
            {18, 99, 1,   1, 7, 7},
            {19, 100, 1,  6, 8},
            {20, 101, 1,  1, 6, 8},
            {21, 102, 1,  2, 7, 7},
            {22, 265, 3,  3, 8, 8, 8, 8},
            {23, 104, 1,  2, 6, 8},
            {24, 186, 2,  3, 7, 8, 8},
            {25, 25, 0,   5},
            {26, 26, 0,   1, 5},
            {27, 189, 2,  5, 6, 8, 8},
            {28, 109, 1,  3, 6, 8},
            {29, 29, 0,   2, 5},
            {30, 192, 2,  8, 8, 8},
            {31, 193, 2,  1, 8, 8, 8},
            {32, 113, 1,  7, 8},
            {33, 114, 1,  1, 7, 8},
            {34, 196, 2,  2, 8, 8, 8},
            {35, 116, 1,  4, 6, 8},
            {36, 36, 0,   6},
            {37, 37, 0,   1, 6},
            {38, 281, 3,  5, 8, 8, 8, 8},
            {39, 201, 2,  3, 8, 8, 8},
            {40, 40, 0,   2, 6},
            {41, 122, 1,  3, 7, 8},
            {42, 123, 1,  5, 7, 7},
            {43, 448, 5,  8, 8, 8, 8, 8, 8, 8},
            {44, 125, 1,  5, 6, 8},
            {45, 45, 0,   3, 6},
            {46, 208, 2,  4, 8, 8, 8},
            {47, 128, 1,  8, 8},
            {48, 129, 1,  1, 8, 8},
            {49, 49, 0,   7},
            {50, 50, 0,   1, 7},
            {51, 132, 1,  2, 8, 8},
            {52, 52, 0,   4, 6},
            {53, 53, 0,   2, 7},
            {54, 54, 0,   1, 2, 7},
            {55, 217, 2,  5, 8, 8, 8},
            {56, 137, 1,  3, 8, 8},
            {57, 138, 1,  5, 7, 8},
            {58, 58, 0,   3, 7},
            {59, 59, 0,   1, 3, 7},
            {60, 384, 4,  8, 8, 8, 8, 8, 8},
            {61, 61, 0,   5, 6},
            {62, 305, 3,  7, 8, 8, 8, 8},
            {63, 144, 1,  4, 8, 8},
            {64, 64, 0,   8},
            {65, 65, 0,   1, 8},
            {66, 228, 2,  6, 8, 8, 8},
            {67, 229, 2,  1, 6, 8, 8, 8},
            {68, 68, 0,   2, 8},
            {69, 69, 0,   1, 2, 8},
            {70, 232, 2,  2, 6, 8, 8, 8},
            {71, 314, 3,  3, 7, 8, 8, 8, 8},
            {72, 153, 1,  5, 8, 8},
            {73, 73, 0,   3, 8},
            {74, 74, 0,   5, 7},
            {75, 75, 0,   1, 5, 7},
            {76, 157, 1,  2, 5, 8, 8},
            {77, 320, 3,  8, 8, 8, 8, 8},
            {78, 321, 3,  1, 8, 8, 8, 8, 8},
            {79, 241, 2,  7, 8, 8, 8},
            {80, 80, 0,   4, 8}
        };
        
        gamma_list_base_10->Calculate();
        const GammaValuesVector input_value = gamma_list_base_10->ConvertGammaListToVector();
        
        compare(expected_value, input_value);
    }
}

#endif